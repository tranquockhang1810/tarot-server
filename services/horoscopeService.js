const HoroscopeModel = require("../models/horoscope/horoscope.model");
const GeminiService = require("./geminiService");
const TranslationService = require("./translationService");
const UserService = require("./userService");
const NotificationService = require("./notificationService");
const moment = require("moment-timezone");

class HoroscopeService {
  static async getHoroscope(userId, birthDate, gender, language, date) {
    try {
      const formattedDate = date // YYYY-MM-DD

      let horoscope = await HoroscopeModel.findOne({ userId, date: formattedDate });

      if (!horoscope) {
        // G·ªçi AI ƒë·ªÉ t·∫°o horoscope m·ªõi
        const newHoroscope = await GeminiService.generateHoroscope(birthDate, gender, formattedDate);
        horoscope = await HoroscopeModel.create({ userId, date: formattedDate, ...newHoroscope });
      }

      // N·∫øu l√† ti·∫øng Vi·ªát, tr·∫£ lu√¥n d·ªØ li·ªáu g·ªëc
      if (language === "vi") return { ...horoscope._doc, translations: undefined };

      // Ki·ªÉm tra b·∫£n d·ªãch c√≥ s·∫µn
      if (horoscope.translations?.get(language)) {
        return horoscope.translations.get(language);
      }

      // N·∫øu ch∆∞a c√≥ b·∫£n d·ªãch, g·ªçi AI ƒë·ªÉ d·ªãch
      const translatedHoroscope = await TranslationService.translate(JSON.stringify(horoscope), "vi", language);

      // L∆∞u b·∫£n d·ªãch v√†o DB
      await HoroscopeModel.updateOne(
        { userId, date: formattedDate },
        { $set: { [`translations.${language}`]: translatedHoroscope } }
      );

      return translatedHoroscope;
    } catch (error) {
      console.error("‚ùå L·ªói trong HoroscopeService:", error);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y horoscope.");
    }
  }

  static async deleteOldHoroscopes() {
    const threeDaysAgo = moment().tz("Asia/Ho_Chi_Minh").startOf("day").subtract(3, "days").format("YYYY-MM-DD");
    const formattedOldDate = threeDaysAgo;

    const deleteResult = await HoroscopeModel.deleteMany({ date: { $lte: formattedOldDate } });
    console.log(`‚úÖƒê√£ x√≥a ${deleteResult.deletedCount} horoscope c≈© h∆°n ${formattedOldDate}`);
  }

  static async getUserHoroscopes(userId, birthDate, gender, language = "vi") {
    try {
      const today = moment().tz("Asia/Ho_Chi_Minh").startOf("day");
      const datesToCheck = [
        today.clone().format("YYYY-MM-DD"),
        today.clone().subtract(1, "days").format("YYYY-MM-DD"),
        today.clone().subtract(2, "days").format("YYYY-MM-DD"),
      ];

      // T√¨m c√°c horoscope ƒë√£ c√≥ trong DB
      let existingHoroscopes = await HoroscopeModel.find({
        userId,
        date: { $in: datesToCheck }
      }).sort({ date: -1 });

      // Chuy·ªÉn danh s√°ch th√†nh Set ƒë·ªÉ ki·ªÉm tra ng√†y n√†o c√≤n thi·∫øu
      const existingDates = new Set(existingHoroscopes.map(h => h.date));

      // L·ªçc ra c√°c ng√†y ch∆∞a c√≥ d·ªØ li·ªáu
      const missingDates = datesToCheck.filter(date => !existingDates.has(date));

      if (missingDates.length > 0) {
        console.log(`üîç Thi·∫øu horoscope cho c√°c ng√†y: ${missingDates.join(", ")} ‚Üí Ti·∫øn h√†nh t·∫°o m·ªõi...`);

        const newHoroscopes = await Promise.all(
          missingDates.map(async (date) => {
            const newHoroscope = await GeminiService.generateHoroscope(birthDate, gender, date);
            return { userId, date, ...newHoroscope };
          })
        );

        // L∆∞u v√†o DB
        await HoroscopeModel.insertMany(newHoroscopes);

        // Sau khi insert, c·∫ßn l·∫•y l·∫°i danh s√°ch ƒë·∫ßy ƒë·ªß t·ª´ DB
        existingHoroscopes = await HoroscopeModel.find({
          userId,
          date: { $in: datesToCheck }
        }).sort({ date: -1 }); // S·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t
      }

      // N·∫øu l√† ti·∫øng Vi·ªát, tr·∫£ v·ªÅ danh s√°ch g·ªëc
      if (language === "vi") {
        return existingHoroscopes.map(horoscope => ({ ...horoscope._doc, translations: undefined }));
      }

      // N·∫øu l√† ng√¥n ng·ªØ kh√°c, ki·ªÉm tra b·∫£n d·ªãch ho·∫∑c g·ªçi AI d·ªãch
      const translatedHoroscopes = await Promise.all(
        existingHoroscopes.map(async (horoscope) => {
          if (horoscope.translations?.get(language)) {
            return horoscope.translations.get(language);
          }

          // N·∫øu ch∆∞a c√≥ b·∫£n d·ªãch, g·ªçi AI ƒë·ªÉ d·ªãch
          const translatedHoroscope = await TranslationService.translate(JSON.stringify(horoscope), "vi", language);

          // L∆∞u b·∫£n d·ªãch v√†o DB
          await HoroscopeModel.updateOne(
            { _id: horoscope._id },
            { $set: { [`translations.${language}`]: translatedHoroscope } }
          );

          return translatedHoroscope;
        })
      );

      return translatedHoroscopes;
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch horoscope:", error);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch horoscope.");
    }
  }

  static async metionUsersCheckHoroscope() {
    try {
      const today = moment().tz("Asia/Ho_Chi_Minh").format("YYYY-MM-DD");
  
      const users = await UserService.getAllUsers();
      if (!users.length) return console.log("‚ùå Kh√¥ng c√≥ user ƒë·ªÉ g·ª≠i notification.");
  
      const notifications = users.map(user => ({
        user: user._id,
        title: "üîÆ Horoscope h√¥m nay ƒë√£ s·∫µn s√†ng!",
        description: `Xin ch√†o ${user.name || "b·∫°n"}! Th√¥ng ƒëi·ªáp h√¥m nay ƒëang ch·ªù b·∫°n kh√°m ph√° üåü`,
      }));
  
      await Promise.all(
        notifications.map(notification => NotificationService.createNotification(notification))
      );
  
      console.log(`‚úÖ ƒê√£ g·ª≠i notification xem horoscope cho ${users.length} ng∆∞·ªùi d√πng (${today})`);
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i notification horoscope:", error);
      throw new Error("Kh√¥ng th·ªÉ g·ª≠i notification horoscope.");
    }
  }

}

module.exports = HoroscopeService;
